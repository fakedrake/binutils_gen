 MAJOR|    pattern         | MINOR|         |             |                                                 |                                                   |   |  |    |    |        | | | |         | 	                                                                 |
332222|22222211111111110000|000000|         |             |                                                 |                                                   |   |  |    |    |        | | | |         | 	                                                                 |
109876|54321098765432109876|543210|opcode   | syntax      | integer verilog                                 | float verilog                                     |IW |FW|IMEM|FMEM|  JUMP  |V|N|P|ABORT    |Description                                                           |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|00000tttttdddddiiiii|     0|sll      | rd,rt,imm   | EX_WData = uRT << shf;                          |                                                   |RD |  |    |    | nojump |1|1|0|         | Left shift a word by a fixed number of bits.                         |
     0|00000tttttdddddiiiii|     2|srl      | rd,rt,imm   | EX_WData = uRT >> shf;                          |                                                   |RD |  |    |    | nojump |1|1|0|         | Right shift a word by a fixed number of bits.                        |
     0|00001tttttdddddiiiii|     2|rotr     | rd,rt,imm   | EX_WData = (uRT>>shf)|(uRT<<(32-shf));          |                                                   |RD |  |    |    | nojump |0|1|0|         | Rotate a word by a fixed number of bits.                             |
     0|00000tttttdddddiiiii|     3|sra      | rd,rt,imm   | EX_WData = sRT >>> shf;                         |                                                   |RD |  |    |    | nojump |1|1|0|         | Arithmetic right shift a word by a fixed number of bits.             |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|ssssstttttddddd00000|     4|sllv     | rd,rt,rs    | EX_WData = uRT << (uRS & 0x1f);                 |                                                   |RD |  |    |    | nojump |1|1|0|         | Left shift a word by a variable number of bits.                      |
     0|ssssstttttddddd00000|     6|srlv     | rd,rt,rs    | EX_WData = uRT >> (uRS & 0x1f);                 |                                                   |RD |  |    |    | nojump |1|1|0|         | Right shift a word by a variable number of bits.                     |
     0|ssssstttttddddd00001|     6|rotrv    | rd,rt,rs    | EX_WData = (uRT >> uRS)|(uRT << (32-uRS));      |                                                   |RD |  |    |    | nojump |0|1|0|         | Rotate a word by a variable number of bits.                          |
     0|ssssstttttddddd00000|     7|srav     | rd,rt,rs    | EX_WData = sRT >>> (uRS & 0x1f);                |                                                   |RD |  |    |    | nojump |1|1|0|         | Arithmetic right shift a word by a variable number of bits.          |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    28|ssssstttttddddd00000|     2|mul      | rd,rs,rt    | EX_WData = (sRS * sRT);                         |                                                   |RD |  |    |    | nojump |1|1|0|         | Multiply two integer words                                           |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|ssssstttttddddd00001|    25|mulu     | rd,rs,rt    | EX_WData = (uRS * uRT);                         |                                                   |RD |  |    |    | nojump |1|1|0|         | Multiply two integer words                                           |
     0|ssssstttttddddd00000|    33|addu     | rd,rs,rt    | EX_WData = sRS + sRT;                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Add two integer words                                                |
     0|ssssstttttddddd00000|    35|subu     | rd,rs,rt    | EX_WData = sRS - sRT;                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Sub two integer words                                                |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|ssssstttttddddd01001|    25|mulhiu   | rd,rs,rt    | EX_WData = (uRS * uRT)>>32;                     |                                                   |RD |  |    |    | nojump |1|1|0|         |                                                                      |
    28|ssssstttttddddd00000|     3|mulhi    | rd,rs,rt    | EX_WData = (sRS * sRT)>>32;                     |                                                   |RD |  |    |    | nojump |1|1|0|         |                                                                      |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|ssssstttttddddd00000|    36|and      | rd,rs,rt    | EX_WData = uRS & uRT;                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Bitwise logical AND on RS and RT                                     |
     0|ssssstttttddddd00000|    37|or       | rd,rs,rt    | EX_WData = uRS | uRT;                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Bitwise logical OR  on RS and RT                                     |
     0|ssssstttttddddd00000|    38|xor      | rd,rs,rt    | EX_WData = uRS ^ uRT;                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Bitwise logical XOR on RS and RT                                     |
     0|ssssstttttddddd00000|    39|nor      | rd,rs,rt    | EX_WData = ~(uRS | uRT);                        |                                                   |RD |  |    |    | nojump |1|1|0|         | Bitwise logicla NOR on RS and RT                                     |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|ssssstttttddddd00000|    42|slt      | rd,rs,rt    | EX_WData = (sRS<sRT);                           |                                                   |RD |  |    |    | nojump |1|1|0|         | Set RD register if signed int in RS is less than signed int in RT    |
     0|ssssstttttddddd00000|    43|sltu     | rd,rs,rt    | EX_WData = (uRS < uRT);                         |                                                   |RD |  |    |    | nojump |1|1|0|         | Set RD register if unsigned int in RS is less than unsigned int in RT|
    31|00000tttttddddd00010|    32|wsbh     | rd,rt       | EX_WData = swapbytes(uRT);                      |                                                   |RD |  |    |    | nojump |0|1|0|         | Swap bytes of RT register.                                           |
    31|00000tttttddddd10000|    32|sbext    | rd,rt       | EX_WData = sext8(sRT);                          |                                                   |RD |  |    |    | nojump |1|1|0|         | Byte Sign Extend register RT.                                        |
    31|00000tttttddddd11000|    32|shext    | rd,rt       | EX_WData = sext16(sRT);                         |                                                   |RD |  |    |    | nojump |1|1|0|         | Half Word Sign Extend  register RT.                                  |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|sssss00001ddddd00000|     1|movt     | rd,rs       | if (ff_reg ==1) { EX_WData = uRS;               |                                                   |RD |  |    |    | conmov |1|1|0|         | Conditional move RS to RD if float_flag_reg is set true.             |
     0|sssss00000ddddd00000|     1|movf     | rd,rs       | if (ff_reg ==0) { EX_WData = uRS;               |                                                   |RD |  |    |    | conmov |1|1|0|         | Conditional move RS to RD if float_flag_reg is set false.            |
     0|ssssstttttddddd00000|    10|movz     | rd,rs,rt    | if (uRT == 0) { EX_WData = uRS;                 |                                                   |RD |  |    |    | conmov |1|1|0|         | Conditional move RS to RD if RT is zero.                             |
     0|ssssstttttddddd00000|    11|movn     | rd,rs,rt    | if (uRT != 0) { EX_WData = uRS;                 |                                                   |RD |  |    |    | conmov |1|1|0|         | Conditional move RS to RD if RT is non zero.                         |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     1|sssss00000iiiiiiiiii|iiiiii|bltz     | rs,Imm16    | newPC = (sRS<0) ? (branch_addr):newPC;          |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS value is less than zero                                 |
     1|sssss10000iiiiiiiiii|iiiiii|bltzal   | rs,Imm16    | newPC = (sRS<0) ? (branch_addr):newPC;          |                                                   |   |  |    |    | pcrela |1|1|0|         | Branc if RS value is less than zero and save pc to register          |
      |                    |      |         |             | EX_WData = EX_PC +4;                            |                                                   |31 |  |    |    |        | | | |         |                                                                      |
     1|sssss00001iiiiiiiiii|iiiiii|bgez     | rs,Imm16    | newPC = (sRS>=0) ? (branch_addr):newPC;         |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS value is greater-equal than zero                        |
     1|sssss10001iiiiiiiiii|iiiiii|bgezal   | rs,Imm16    | newPC = (sRS>=0) ? (branch_addr):newPC;         |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS value is greater-equal than zero and save pc to reg 31  |
      |                    |      |         |             | EX_WData = EX_PC +4;                            |                                                   |31 |  |    |    |        | | | |         |                                                                      |
     4|ssssstttttiiiiiiiiii|iiiiii|beq      | rt,rs,Imm16 | newPC = (uRS==uRT) ? (branch_addr) : newPC;     |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS and RT values are equal                                 |
     5|ssssstttttiiiiiiiiii|iiiiii|bneq     | rt,rs,Imm16 | newPC = (uRS!=uRT) ? (branch_addr) : newPC;     |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS and RT values are not equal                             |
     6|sssss00000iiiiiiiiii|iiiiii|blez     | rs,Imm16    | newPC = (sRS <= 0) ? (branch_addr) : newPC;     |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS value is less-equal to zero                             |
     7|sssss00000iiiiiiiiii|iiiiii|bgtz     | rs,Imm16    | newPC = (sRS > 0) ? (branch_addr) : newPC;      |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if RS value is greater than zero                              |
    17|0100000001iiiiiiiiii|iiiiii|bc1t     | Imm16       | newPC = (ff_reg==1) ? (branch_addr):newPC;      |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if float flag register is true                                |
    17|0100000000iiiiiiiiii|iiiiii|bc1f     | Imm16       | newPC = (ff_reg==0) ? (branch_addr):newPC;      |                                                   |   |  |    |    | pcrela |1|1|0|         | Branch if float flag register is false                               |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|sssss000000000000000|     8|jr       | rs          | newPC = uRS;                                    |                                                   |   |  |    |    | nojump |1|1|0|         | Jump to an address loaded from RS                                    |
     0|sssss000001111100000|     9|jalr     | rs          | newPC = uRS; EX_WData = EX_PC +4;               |                                                   |31 |  |    |    | nojump |1|1|0|         | Jump to an address loaded from RS and save the pc to reg 31          |
     2|iiiiiiiiiiiiiiiiiiii|iiiiii|j        | Imm26       | newPC = jump26(EX_PC,Imm26);                    |                                                   |   |  |    |    | nojump |1|1|0|         | Jump to an address loaded from immediate                             |
     3|iiiiiiiiiiiiiiiiiiii|iiiiii|jal      | Imm26       | newPC = jump26(EX_PC,Imm26);EX_WData = EX_PC +4;|                                                   |31 |  |    |    | nojump |1|1|0|         | Jump to an address loaded from immediate & save pc to reg 31         |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     9|ssssstttttiiiiiiiiii|iiiiii|addiu    | rt,rs,Imm16 | EX_WData = sRS + sImm16;                        |                                                   |RT |  |    |    | nojump |1|1|0|         | Add RS with 16bit immediate                                          |
    10|ssssstttttiiiiiiiiii|iiiiii|slti     | rt,rs,Imm16 | EX_WData = (sRS < sImm16);                      |                                                   |RT |  |    |    | nojump |1|1|0|         | Set RT if signed integer in RS is less than Immediate                |
    11|ssssstttttiiiiiiiiii|iiiiii|sltiu    | rt,rs,Imm16 | EX_WData = (uRS < Imm16);                       |                                                   |RT |  |    |    | nojump |1|1|0|         | Set Rt if unsigned integer in RS is less than Immediate              |
    12|ssssstttttiiiiiiiiii|iiiiii|andi     | rt,rs,Imm16 | EX_WData = uRS & Imm16;                         |                                                   |RT |  |    |    | nojump |1|1|0|         | Bitwise logical AND on RS and 16bit immediate                        |
    13|ssssstttttiiiiiiiiii|iiiiii|ori      | rt,rs,Imm16 | EX_WData = uRS | Imm16;                         |                                                   |RT |  |    |    | nojump |1|1|0|         | Bitwise logical OR  on RS and 16bit immediate                        |
    14|ssssstttttiiiiiiiiii|iiiiii|xori     | rt,rs,Imm16 | EX_WData = uRS ^ Imm16;                         |                                                   |RT |  |    |    | nojump |1|1|0|         | Bitwise logical XOR on RS and 16bit immediate                        |
    15|00000tttttiiiiiiiiii|iiiiii|lui      | rt,Imm16    | EX_WData = Imm16<<16;                           |                                                   |RT |  |    |    | nojump |1|1|0|         | Load 16bit immediate on the 16 MSB of register RT                    |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10000TTTTTSSSSSDDDDD|     0|add.s    | fd,fs,ft    |                                                 | f_EX_WData = s32_fpu_2op(sFS,sFT,FADD32);         |   |FD|    |    | nojump |1|1|1|         | Add two float words                                                  |
    17|10000TTTTTSSSSSDDDDD|     1|sub.s    | fd,fs,ft    |                                                 | f_EX_WData = s32_fpu_2op(sFS,sFT,FSUB32);         |   |FD|    |    | nojump |1|1|1|         | Sub two float words                                                  |
    17|10000TTTTTSSSSSDDDDD|     2|mul.s    | fd,fs,ft    |                                                 | f_EX_WData = s32_fpu_2op(sFS,sFT,FMUL32);         |   |FD|    |    | nojump |1|1|1|         | Multiply two float words                                             |
    17|0000000000SSSSSDDDDD|     4|frcp     | fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,FRCP32);             |   |FD|    |    | nojump |1|1|1|         | Compute the reciprocal of a float word                               |
    17|1000000000SSSSSDDDDD|     4|sqrt.s   | fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,FSQR32);             |   |FD|    |    | nojump |1|1|1|         | Compute the square root of a float word                              |
    17|1000000000SSSSSDDDDD|     5|abs.s    | fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,FABS32);             |   |FD|    |    | nojump |1|1|1|         | Compute the absolute value of a float word                           |
    17|1000000000SSSSSDDDDD|     7|neg.s    | fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,FNEG32);             |   |FD|    |    | nojump |1|1|1|         | Compute the negative value of a float word                           |
    19|RRRRRTTTTTSSSSSDDDDD|    32|madd.s   | fd,fr,fs,ft |                                                 | f_EX_WData = s32_fpu_3op(sFS,sFT,sFR,FMADD32);    |   |FD|    |    | nojump |0|1|1|         | Multiply float words on FS and FT, then add FR                       |
    19|RRRRRTTTTTSSSSSDDDDD|    40|msub.s   | fd,fr,fs,ft |                                                 | f_EX_WData = s32_fpu_3op(sFS,sFT,sFR,FMSUB32);    |   |FD|    |    | nojump |0|1|1|         | Multiply float words on FS and FT, then sub FR                       |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|00000tttttSSSSS00000|     0|mfc1     | rt,fs       | EX_WData = F2I;                                 | F2I = sFS;                                        |RT |  |    |    | nojump |1|1|1|         | Move float word from FS to RT                                        |
    17|00100tttttSSSSS00000|     0|mtc1     | rt,fs       | I2F = uRT;                                      | f_EX_WData = I2F;                                 |   |FS|    |    | nojump |1|1|0|         | Move float word from RT to FS                                        |
    17|1000000000SSSSSDDDDD|     6|mov.s    | fd,fs       |                                                 | f_EX_WData = sFS;                                 |   |FD|    |    | nojump |1|1|1|         | Move float word from FS to FD                                        |
    17|1000000000SSSSSDDDDD|    17|movf.s   | fd,fs,flag  |                                                 | if (ff_reg==0) { f_EX_WData = sFS;                |   |FD|    |    | conmov |1|1|1|         | Conditionally move float word from FS to FD if float flag is false   |
    17|1000000001SSSSSDDDDD|    17|movt.s   | fd,fs,flag  |                                                 | if (ff_reg==1) { f_EX_WData = sFS;                |   |FD|    |    | conmov |1|1|1|         | Conditionally move float word from FS to FD if float flag is true    |
    17|10000tttttSSSSSDDDDD|    18|movz.s   | fd,fs,rt    | temp_read = uRT;                                | f_EX_WData = fpu_op(sFS,Movz_s);                  |   |FD|    |    | conmov |0|1|0|         | Conditionally move float word from FS to FD if RT value is zero      |
    17|10000tttttSSSSSDDDDD|    19|movn.s   | fd,fs,rt    | temp_read = uRT;                                | f_EX_WData = fpu_op(sFS,Movn_s);                  |   |FD|    |    | conmov |0|1|0|         | Conditionally move float word from FS to FD if RT value is nonzero   |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|1000000000SSSSSDDDDD|    13|trunc.w.s| fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,TRUNCWS32);          |   |FD|    |    | nojump |0|1|1|         |                                                                      |
    17|1010000000SSSSSDDDDD|    32|cvt.s.w  | fd,fs       |                                                 | f_EX_WData = s32_fpu_1op(sFS,CVTSW32);            |   |FD|    |    | nojump |0|1|1|         |                                                                      |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10000TTTTTSSSSS00000|    48|c.f.s    | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_F);              |   |FC|    |    | nojump |0|1|1|         | Set float flag reg to Zero                                           |
    17|10000TTTTTSSSSS00000|    49|c.un.s   | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_UN);             |   |FC|    |    | nojump |0|1|1|         | Set float flag reg true if FS or FT is unordered                     |
    17|10000TTTTTSSSSS00000|    50|c.eq.s   | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_EQ);             |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS and FT are equal and ordered           |
    17|10000TTTTTSSSSS00000|    51|c.ueq.s  | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_UEQ);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS and FT are equal or unordered          |
    17|10000TTTTTSSSSS00000|    52|c.olt.s  | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_OLT);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less than FT and ordered            |
    17|10000TTTTTSSSSS00000|    53|c.ult.s  | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_ULT);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less than FT and unordered          |
    17|10000TTTTTSSSSS00000|    54|c.ole.s  | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_OLE);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less-equal to FT and ordered        |
    17|10000TTTTTSSSSS00000|    55|c.ule.s  | fs,ft,flag  |                                                 | ff_wrt = s32_fpu_cmp(sFS,sFT,CMP_ULE);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less-equal to FT and unordered      |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10000TTTTTSSSSS00000|    60|c.lt.s   | fs,ft,flag  |                                                 | ff_wrt = fpu_op(sFS,sFT,Lt);                      |   |FC|    |    | nojump |0|0|1|         | Set float flag reg true if FS is less than FT                        |
    17|10000TTTTTSSSSS00000|    62|c.le.s   | fs,ft,flag  |                                                 | ff_wrt = fpu_op(sFS,sFT,Le);                      |   |FC|    |    | nojump |0|0|1|         | Set float flag reg true if FS is less-equal to FT                    |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|1011000000SSSSSDDDDD|     6|mov.vec  | vd,vs       |                                                 | v_EX_WData = s32_fpu_v2_1op(vFS, FMOVV2);         |   |FD|    |    | nojump |0|1|1|         | Move vector of 2 float words from FS to FD                           |
    17|1011000000SSSSSDDDDD|    17|movf.vec | vd,vs,flag  |                                                 | v_EX_WData = fpu_op(vFS,Movf_ps,ff_reg);          |   |FD|    |    | conmov |0|1|1|         | Move vector of 2 float words from FS to FD if float flag is false    |
    17|1011000001SSSSSDDDDD|    17|movt.vec | vd,vs,flag  |                                                 | v_EX_WData = fpu_op(vFS,Movt_ps,ff_reg);          |   |FD|    |    | conmov |0|1|1|         | Move vector of 2 float words from FS to FD if float flag is true     |
    17|10110tttttSSSSSDDDDD|    18|movz.v2  | vd,vs,rt    | temp_read = uRT;                                | v_EX_WData = fpu_op(vFS,Movz_ps);                 |   |FD|    |    | conmov |0|1|0|         | Move vector of 2 float words from FS to FD if RT value is zero       |
    17|10110tttttSSSSSDDDDD|    19|movn.v2  | vd,vs,rt    | temp_read = uRT;                                | v_EX_WData = fpu_op(vFS,Movn_ps);                 |   |FD|    |    | conmov |0|1|0|         | Move vector of 2 float words from FS to FD if RT value is non zero   |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10110TTTTTSSSSSDDDDD|     0|add.v2   | vd,vs,vt    |                                                 | v_EX_WData = s32_fpu_v2_2op(vFS,vFT,FADDV2);      |   |FD|    |    | nojump |0|1|1|         | Add 2 vectors of 2 float words                                       |
    17|10110TTTTTSSSSSDDDDD|     1|sub.v2   | vd,vs,vt    |                                                 | v_EX_WData = s32_fpu_v2_2op(vFS,vFT,FSUBV2);      |   |FD|    |    | nojump |0|1|1|         | Sub 2 vectors of 2 float words                                       |
    17|10110TTTTTSSSSSDDDDD|     2|mul.v2   | vd,vs,vt    |                                                 | v_EX_WData = s32_fpu_v2_2op(vFS,vFT,FMULV2);      |   |FD|    |    | nojump |0|1|1|         | Multiply 2 vectors of 2 float words                                  |
    17|1011000000SSSSSDDDDD|     5|abs.v2   | vd,vs       |                                                 | v_EX_WData = s32_fpu_v2_1op(vFS,FABSV2);          |   |FD|    |    | nojump |0|1|1|         | Compute the absolute values of the elements of vector in FS          |
    17|1011000000SSSSSDDDDD|     7|neg.v2   | vd,vs       |                                                 | v_EX_WData = s32_fpu_v2_1op(vFS,FNEGV2);          |   |FD|    |    | nojump |0|1|1|         | Compute the negative values of the elements of vector in FS          |
    19|RRRRRTTTTTSSSSSDDDDD|    38|madd.v2  | vd,vr,vs,vt |                                                 | v_EX_WData = s32_fpu_v2_3op(vFS,vFT,vFR,FMADDV2); |   |FD|    |    | nojump |0|1|1|         | Multiply vectors of 2 float words in FS and FT,then add vector in FR |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10010TTTTTSSSSSDDDDD|     0|add.v4   | vd,vs,vt    |                                                 | V_EX_WData = s16_fpu_v4_2op(VFS,VFT,FADDV4);      |   |FD|    |    | nojump |0|1|1|         | Add 2 vectors of 4 float words                                       |
    17|10010TTTTTSSSSSDDDDD|     1|sub.v4   | vd,vs,vt    |                                                 | V_EX_WData = s16_fpu_v4_2op(VFS,VFT,FSUBV4);      |   |FD|    |    | nojump |0|1|1|         | Sub 2 vectors of 4 float words                                       |
    17|10010TTTTTSSSSSDDDDD|     2|mul.v4   | vd,vs,vt    |                                                 | V_EX_WData = s16_fpu_v4_2op(VFS,VFT,FMULV4);      |   |FD|    |    | nojump |0|1|1|         | Multiply 2 vectors of 4 half float                                   |
    17|1001000000SSSSSDDDDD|     5|abs.v4   | vd,vs       |                                                 | V_EX_WData = s16_fpu_v4_1op(VFS,FABSV4);          |   |FD|    |    | nojump |0|1|1|         | Compute the absolute values of the elements of vector in FS          |
    17|1001000000SSSSSDDDDD|     7|neg.v4   | vd,vs       |                                                 | V_EX_WData = s16_fpu_v4_1op(VFS,FNEGV4);          |   |FD|    |    | nojump |0|1|1|         | Compute the negative values of the elements of vector in FS          |
    19|RRRRRTTTTTSSSSSDDDDD|    39|madd.v4  | vd,vr,vs,vt |                                                 | V_EX_WData = s16_fpu_v4_3op(VFS,VFT,VFR,FMADDV4); |   |FD|    |    | nojump |0|1|1|         | Multiply vectors of 4 float words in FS and FT,then add vector in FR |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    29|11110TTTTTSSSSSiiiii|     7|f_extr2  | ft,vs,imm   |                                                 | s32_fpu_vec(f_EX_WData, vFS, 0, shf, VEXTRV2);    |   |FT|    |    | nojump |0|1|1|         | Extract element of a vector of 2 float words                         |
    31|RRRRRTTTTTSSSSSiiiii|     7|f_ins2   | vt,vs,fr,imm|                                                 | s32_fpu_vec(v_EX_WData, vFS, sFR, shf, VINSV2);   |   |FT|    |    | nojump |0|1|1|         | Insert element to a vector of 2 float words                          |
    29|11100TTTTTSSSSSDDDDD|    11|vbuild2  | vd,fs,ft    |                                                 | v_EX_WData = [sFS,sFT];                           |   |VD|    |    | nojump |1|1|1|         | Build a vector of 2 float words                                      |
    28|RRRRRTTTTTSSSSSiiiii|     9|f_ins4   | vt,vs,fr,imm|                                                 | s16_fpu_vec(V_EX_WData, VFS, hFR, shf, VINSV4);   |   |FT|    |    | nojump |0|1|1|         | Insert element to a vector of 4 half float words                     |
    29|11010TTTTTSSSSSiiiii|     7|f_extr4  | ft,vs,imm   |                                                 | s16_fpu_vec(h_EX_WData, VFS, 0, shf, VEXTRV4);    |   |HT|    |    | nojump |0|1|1|         | Extract element of a vector of 4 half float words                    |
    30|RRRRRTTTTTSSSSSDDDDD|    11|vbuild4  | fd,fr,fs,ft |                                                 | V_EX_WData = [hFS,hFT,hFD,hFR];                   |   |10|    |    | nojump |1|1|1|         | Build a vector of 4 float words                                      |
    29|11111TTTTTiiiiiiiiii|iiiiii|fset     | ft,Imm16    |                                                 | f_EX_WData = fp_l2s(Imm16);                       |   |FT|    |    | nojump |1|1|1|         | Load half word immediate to float register FT                        |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    28|sssss00000SSSSS00000|    12|pixout   | rs,vs       | //fb_DXY = uRS;                                 |// fb_RGBA = sVS;                                  |GP |GP|    |    | nojump |1|1|0|         |                                                                      |
    28|sssssTTTTT10000DDDDD|    13|sample   | rs,vt,vd    | //$display("Sample\n");                         |                                                   |   |  |    |    | nojump |1|1|0|         |                                                                      |
    28|01001TTTTTdddddDDDDD|    14|pixin    | rd,vt,vd    | //EX_WData = read_gport();                      |// V_EX_WData = fpu_op(GP,Pixin);                  |RD |FD|    |    | nojump |0|1|0|         |                                                                      |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
     0|sssss000000000010000|     8|waket    | rs          | waket(sRS);                                     |                                                   |   |  |    |    | nojump |0|1|0|         | Wake thread                                                          |
    31|sssssttttt00000iiiii|    20|tmove    | rt,rs,imm   | EX_WThread = uRT; EX_WData = uRS;               |                                                   |shf|  |    |    | nojump |1|1|0|         | Copy register to another's thread register                           |
     0|00101011011011111011|    47|invalid  |             | //donothing just for error detection;           |                                                   |   |  |    |    | nojump |1|1|0|         |                                                                      |
    17|00010tttttSSSSS00000|     0|cfc1     | rt,fs       | EX_WData = read_fc_reg(sFS);                    |                                                   |RT |  |    |    | nojump |0|0|0|         | Move float flag register to RT                                       |
    17|00110tttttSSSSS00000|     0|ctc1     | fs,rt       | EX_WData = write_fc_reg(uRT);                   |                                                   |   |FS|    |    | nojump |0|0|0|         | Move RT to float flag register                                       |
    31|ssssstttttdddddiiiii|     8|fork     | rd,rs,rt,imm| EX_WData = Fork_req(uRT,uRS,shf);               |                                                   |RD |  |    |    | nojump |1|1|0|         | Create a thread                                                      |
    31|sssss000000000000000|     9|yield    | rs          | yield(t,uRS);                                   |                                                   |   |  |    |    | nojump |1|1|0|         | Wait until all threads finish                                        |
    28|000000000000000iiiii|    24|barrier  | imm         | barrier(shf);                                   |                                                   |   |  |    |    | nojump |1|1|0|         | Barrier                                                              |
    24|sssssttttt0000000000|     0|wr_hwr   | rs,rt       | write_hardware(uRT,uRS);                        |                                                   |   |  |    |    | nojump |1|1|0|         | Write hardware register                                              |
    25|sssssttttt0000000000|     0|rd_hwr   | rs,rt       | EX_WData = read_hardware(uRT);                  |                                                   |RS |  |    |    | nojump |1|1|0|         | Read hardware register                                               |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|10100TTTTTSSSSS00000|    48|c.f.h    | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_F);              |   |FC|    |    | nojump |0|1|1|         | Set float flag reg to Zero                                           |
    17|10100TTTTTSSSSS00000|    49|c.un.h   | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_UN);             |   |FC|    |    | nojump |0|1|1|         | Set float flag reg true if FS or FT is unordered                     |
    17|10100TTTTTSSSSS00000|    50|c.eq.h   | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_EQ);             |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS and FT are equal and ordered           |
    17|10100TTTTTSSSSS00000|    51|c.ueq.h  | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_UEQ);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS and FT are equal or unordered          |
    17|10100TTTTTSSSSS00000|    52|c.olt.h  | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_OLT);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less than FT and ordered            |
    17|10100TTTTTSSSSS00000|    53|c.ult.h  | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_ULT);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less than FT and unordered          |
    17|10100TTTTTSSSSS00000|    54|c.ole.h  | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_OLE);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less-equal to FT and ordered        |
    17|10100TTTTTSSSSS00000|    55|c.ule.h  | fs,ft,flag  |                                                 | ff_wrt = s16_fpu_cmp(hFS,hFT,CMP_ULE);            |   |FC|    |    | nojump |1|1|1|         | Set float flag reg true if FS is less-equal to FT and unordered      |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    17|1010100000SSSSSDDDDD|    13|trunc.s.h| fd,fs       |                                                 | h_EX_WData = s16_fpu_1op(hFS,TRUNCWS32);          |   |HD|    |    | nojump |0|0|1|         |                                                                      |
    17|1010100000SSSSSDDDDD|    32|cvt.h.s  | fd,fs       |                                                 | f_EX_WData = h2f_fpu_1op(hFS,CVTHS16);            |   |FD|    |    | nojump |0|1|1|         | Convert a half float to float word                                   |
    17|1010100000SSSSSDDDDD|    36|cvt.s.h  | fd,fs       |                                                 | h_EX_WData = f2h_fpu_1op(sFS,CVTSH16);            |   |HD|    |    | nojump |0|1|1|         | Convert a float word to half float                                   |
    44|11111TTTTTiiiiiiiiii|iiiiii|fset_hf  | ft,Imm16    |                                                 | h_EX_WData = fimm;                                |   |HT|    |    | nojump |0|1|1|         | Load an immediate 16bit half float word a register                   |
    17|10111tttttSSSSS00000|     0|mhfc1    | rt,fs       | EX_WData = x.i_v;                               | h_EX_WData = fpu_op(hFS,F2I);                     |RT |  |    |    | nojump |0|0|1|         |                                                                      |
    17|11101tttttSSSSSS0000|     0|mhtc1    | rt,fs       | x.i_v = uRT;                                    | h_EX_WData = fpu_op(I2F);                         |   |HS|    |    | nojump |0|0|0|         |                                                                      |
    17|1010100000SSSSSDDDDD|     6|mov.h    | fd,fs       |                                                 | h_EX_WData = hFS;                                 |   |HD|    |    | nojump |0|1|1|         | Mov half float word from FS to FD                                    |
    38|ssssstttttiiiiiiiiii|iiiiii|ld_hf    | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |   |  |LF16|L16 | nojump |0|1|0|         | Load a half float word from Memory                                   |
    17|10101TTTTTSSSSSDDDDD|     0|add.h    | fd,fs,ft    |                                                 | h_EX_WData = s16_fpu_2op(hFS,hFT,FADD16);         |   |HD|    |    | nojump |0|1|1|         | Add 2 half float words                                               |
    17|10101TTTTTSSSSSDDDDD|     1|sub.h    | fd,fs,ft    |                                                 | h_EX_WData = s16_fpu_2op(hFS,hFT,FSUB16);         |   |HD|    |    | nojump |0|1|1|         | Sub 2 half float words                                               |
    17|10101TTTTTSSSSSDDDDD|     2|mul.h    | fd,fs,ft    |                                                 | h_EX_WData = s16_fpu_2op(hFS,hFT,FMUL16);         |   |HD|    |    | nojump |0|1|1|         | Mul 2 half float words                                               |
    17|1010100000SSSSSDDDDD|     4|frcp.h   | fd,fs       |                                                 | h_EX_WData = s16_fpu_1op(hFS,FRCP16);             |   |HD|    |    | nojump |0|1|1|         | Compute the reciprocal of a half float                               |
    17|1010100000SSSSSDDDDD|     7|neg.h    | fd,fs       |                                                 | h_EX_WData = s16_fpu_1op(hFS,FNEG16);             |   |HD|    |    | nojump |1|1|1|         | Compute the negative value of a half float                           |
    42|ssssstttttiiiiiiiiii|iiiiii|st_hf    | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       | h_EX_MemWData= hFT;                               |   |  |SF16|S16 | nojump |0|1|0|         | Store a half float word to Memory                                    |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    32|ssssstttttiiiiiiiiii|iiiiii|lb       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |RT |  |L08S|    | nojump |1|1|0|dmemo_ack| Load a byte from Memory as a signed value                            |
    33|ssssstttttiiiiiiiiii|iiiiii|lh       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |RT |  |L16S|    | nojump |1|1|0|dmemo_ack| Load a half word from Memory as a signed value                       |
    35|ssssstttttiiiiiiiiii|iiiiii|lw       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |RT |  |L32S|    | nojump |1|1|0|dmemo_ack| Load a Int word from Memory                                          |
    36|ssssstttttiiiiiiiiii|iiiiii|lbu      | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |RT |  |L08U|    | nojump |1|1|0|dmemo_ack| Load a byte from Memory as an unsigned value                         |
    37|ssssstttttiiiiiiiiii|iiiiii|lhu      | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |RT |  |L16U|    | nojump |1|1|0|dmemo_ack| Load a half word from Memory as an unsigned value                    |
    40|ssssstttttiiiiiiiiii|iiiiii|sb       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16; EX_MemWData = uRT;    |                                                   |   |  |S08 |    | nojump |1|1|0|dmemo_ack| Store a byte to Memory                                               |
    41|ssssstttttiiiiiiiiii|iiiiii|sh       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16; EX_MemWData = uRT;    |                                                   |   |  |S16 |    | nojump |1|1|0|dmemo_ack| Store a half int word to Memory                                      |
    43|ssssstttttiiiiiiiiii|iiiiii|sw       | rt,rs,Imm16 | EX_MemWAddr = sRS+sImm16; EX_MemWData = uRT;    |                                                   |   |  |S32 |    | nojump |1|1|0|dmemo_ack| Store an int word to Memory                                          |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    19|sssssttttt00000DDDDD|     0|lwxc1    | fd,rs,rt    | EX_MemWAddr = sRS+sRT;                          |                                                   |   |FD|LF32|L32 | nojump |0|1|0|dmemo_ack| Load a float word from memory                                        |
    19|ssssstttttSSSSS00000|     8|swxc1    | fs,rs,rt    | EX_MemWAddr = sRS+sRT;                          | f_EX_MemWData= fpu_op(sFS,Ram_write_f);           |   |  |SF32|S32 | nojump |0|1|0|dmemo_ack| Store a float word to memory                                         |
    49|sssssTTTTTiiiiiiiiii|iiiiii|lwc1     | ft,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |   |FT|LF32|L32 | nojump |1|1|0|dmemo_ack| Load a float word from memory                                        |
    57|sssssTTTTTiiiiiiiiii|iiiiii|swc1     | ft,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       | f_EX_MemWData= sFT;                               |   |FT|SF32|S32 | nojump |1|1|0|dmemo_ack| Store a float word to memory                                         |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
    19|sssssttttt00000DDDDD|     1|lwx_v2   | vd,rs,rt    | EX_MemWAddr = sRS+sRT;                          |                                                   |   |FD|LF64|L64 | nojump |0|1|0|dmemo_ack| Load a vector of 2 float words from Memory                           |
    19|ssssstttttSSSSS00000|     9|swx_v2   | vs,rs,rt    | EX_MemWAddr = sRS+sRT;                          | f_EX_MemWData= fpu_op(vFS,Ram_write_v2);          |   |  |SF64|S64 | nojump |0|1|0|dmemo_ack| Store a vector of 2 float words to Memory                            |
    53|sssssTTTTTiiiiiiiiii|iiiiii|ld_vec   | vt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       |                                                   |   |FT|LF64|L64 | nojump |1|1|0|dmemo_ack| Load a vector of 2 float words from Memory                           |
    61|sssssTTTTTiiiiiiiiii|iiiiii|st_vec   | vt,rs,Imm16 | EX_MemWAddr = sRS+sImm16;                       | f_EX_MemWData= sVT;                               |   |FT|SF64|S64 | nojump |1|1|0|dmemo_ack| Store a vector of 2 float words to Memory                            |
------+--------------------+------+---------+-------------+-------------------------------------------------+---------------------------------------------------+---+--+----+----+--------+-+-+-+---------+----------------------------------------------------------------------+
